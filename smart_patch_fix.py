#!/usr/bin/env python3
"""
Fix pour Smart Patch Processor - Correction du probl√®me de d√©tection des fichiers cibles
Le probl√®me: Smart Patch d√©tecte 'error.py' au lieu des vrais fichiers dans le patch

Usage: python smart_patch_fix.py
"""

import os
import re
import sys
from pathlib import Path

def fix_target_file_detector():
    """Corrige le module target_file_detector.py"""
    
    detector_file = Path("target_file_detector.py")
    if not detector_file.exists():
        print(f"‚ùå Fichier {detector_file} non trouv√©")
        return False
    
    print(f"üîß Correction de {detector_file}...")
    
    # Lire le contenu actuel
    with open(detector_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # CORRECTION 1: Am√©liorer les patterns de recherche
    old_patterns = '''self.search_patterns = detection_config.get('search_patterns', [])'''
    
    new_patterns = '''self.search_patterns = detection_config.get('search_patterns', [
            r'^\+\+\+\s+([^\\t\\r\\n]+)',        # Nouveau fichier (priorit√© haute)
            r'^---\s+([^\\t\\r\\n]+)',          # Ancien fichier  
            r'^Index:\\s+([^\\r\\n]+)',         # Index Git
            r'^diff\\s+--git\\s+a/([^\\s]+)\\s+b/([^\\s]+)',  # Git diff
            r'^\\*\\*\\*\\s+([^\\t\\r\\n]+)',       # Context diff ancien
        ])'''
    
    content = content.replace(old_patterns, new_patterns)
    
    # CORRECTION 2: Am√©liorer _resolve_filename
    old_resolve = '''def _resolve_filename(self, filename: str) -> Optional[Path]:
        """R√©sout un nom de fichier extrait du patch"""
        # Nettoyer le chemin
        clean_name = os.path.basename(filename.strip())
        
        if not clean_name or clean_name == '/dev/null':
            return None
        
        return self._find_target_file(clean_name)'''
    
    new_resolve = '''def _resolve_filename(self, filename: str) -> Optional[Path]:
        """R√©sout un nom de fichier extrait du patch - VERSION CORRIG√âE"""
        if not filename or not isinstance(filename, str):
            return None
            
        # CORRECTION: Nettoyer les caract√®res parasites et timestamps
        filename = filename.strip()
        
        # Supprimer les timestamps et m√©tadonn√©es communes
        filename = re.sub(r'\\s+\\d{4}-\\d{2}-\\d{2}\\s+\\d{2}:\\d{2}:\\d{2}.*$', '', filename)
        filename = re.sub(r'\\s+[A-Z][a-z]{2}\\s+[A-Z][a-z]{2}\\s+\\d+.*$', '', filename)
        filename = filename.split('\\t')[0]  # Supprimer tout apr√®s une tabulation
        filename = filename.strip()
        
        # CORRECTION: Ignorer les fichiers sp√©ciaux et invalides
        invalid_names = ['/dev/null', '', '.', '..', 'a', 'b', 'error', 'new', 'old']
        clean_name = os.path.basename(filename)
        
        if (not clean_name or 
            clean_name.lower() in invalid_names or 
            len(clean_name) < 2 or
            clean_name.startswith('.')):
            return None
        
        # CORRECTION: V√©rifier si c'est un nom de fichier valide
        if not re.match(r'^[a-zA-Z][a-zA-Z0-9_.-]*\\.[a-zA-Z0-9]+$', clean_name):
            self.logger.debug(f"Nom de fichier invalide ignor√©: '{clean_name}'")
            return None
        
        return self._find_target_file(clean_name)'''
    
    content = content.replace(old_resolve, new_resolve)
    
    # CORRECTION 3: Am√©liorer _detect_from_patch_content
    old_detect = '''def _detect_from_patch_content(self, patch_content: str) -> Optional[Path]:
        """D√©tecte le fichier cible depuis le contenu du patch"""
        lines = patch_content.split('\\n')
        
        for line in lines[:10]:  # Regarder les 10 premi√®res lignes
            for pattern in self.search_patterns:
                match = re.search(pattern, line)
                if match:
                    # Prendre le premier groupe de capture
                    filename = match.group(1).strip()
                    target = self._resolve_filename(filename)
                    if target:
                        return target
        
        return None'''
    
    new_detect = '''def _detect_from_patch_content(self, patch_content: str) -> Optional[Path]:
        """D√©tecte le fichier cible depuis le contenu du patch - VERSION CORRIG√âE"""
        lines = patch_content.split('\\n')
        candidates = []
        
        # CORRECTION: Analyser TOUTES les lignes d'en-t√™te, pas seulement les 10 premi√®res
        for line_num, line in enumerate(lines):
            # Arr√™ter √† la premi√®re ligne de contenu de diff
            if line.startswith(('@@', ' ', '+', '-')) and not line.startswith(('+++', '---')):
                break
                
            line = line.strip()
            if not line:
                continue
                
            for pattern in self.search_patterns:
                try:
                    match = re.search(pattern, line)
                    if match:
                        # CORRECTION: Gestion des diff√©rents groupes de capture
                        if pattern.startswith(r'^diff\\s+--git'):
                            # Pour git diff, prendre le fichier nouveau (groupe 2)
                            filename = match.group(2).strip()
                        else:
                            # Pour les autres, prendre le premier groupe
                            filename = match.group(1).strip()
                        
                        # CORRECTION: Validation et nettoyage du nom de fichier
                        target = self._resolve_filename(filename)
                        if target and target not in candidates:
                            candidates.append(target)
                            self.logger.debug(f"Fichier candidat trouv√©: {target} (ligne {line_num + 1})")
                            
                except Exception as e:
                    self.logger.debug(f"Erreur parsing ligne '{line}': {e}")
                    continue
        
        # Retourner le premier candidat valide
        return candidates[0] if candidates else None'''
    
    content = content.replace(old_detect, new_detect)
    
    # Sauvegarder
    with open(detector_file, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"‚úÖ {detector_file} corrig√©")
    return True

def fix_smart_patch_processor():
    """Corrige le processeur principal"""
    
    processor_file = Path("smart_patch_processor.py")
    if not processor_file.exists():
        print(f"‚ùå Fichier {processor_file} non trouv√©")
        return False
    
    print(f"üîß Correction de {processor_file}...")
    
    with open(processor_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # CORRECTION: Ajouter une m√©thode de d√©tection am√©lior√©e
    new_method = '''
    def detect_patch_targets_improved(self, patch_content: str, patch_path: Path) -> list:
        """NOUVEAU: D√©tecte TOUS les fichiers cibles dans un patch (m√™me multi-fichiers)"""
        targets = []
        
        # Analyser le patch pour identifier tous les fichiers
        lines = patch_content.split('\\n')
        current_files = set()
        
        for line in lines:
            line = line.strip()
            
            # D√©tecter les en-t√™tes de fichiers
            filename = None
            if line.startswith('--- ') and not line.endswith('/dev/null'):
                filename = self._extract_clean_filename(line[4:])
            elif line.startswith('+++ ') and not line.endswith('/dev/null'):
                filename = self._extract_clean_filename(line[4:])
            elif line.startswith('*** '):
                filename = self._extract_clean_filename(line[4:])
            elif line.startswith('Index: '):
                filename = self._extract_clean_filename(line[7:])
            
            if filename and filename not in current_files:
                # R√©soudre le nom de fichier vers un chemin r√©el
                resolved_path = self._resolve_target_path(filename, patch_path)
                if resolved_path:
                    targets.append(resolved_path)
                    current_files.add(filename)
                    self.logger.debug(f"Fichier cible d√©tect√©: {filename} -> {resolved_path}")
        
        # Fallback vers la d√©tection classique si rien trouv√©
        if not targets:
            classic_target = self.detector.detect_target_file(patch_path, patch_content)
            if classic_target:
                targets.append(classic_target)
        
        return targets

    def _extract_clean_filename(self, raw_filename: str) -> str:
        """NOUVEAU: Extrait et nettoie un nom de fichier des m√©tadonn√©es"""
        if not raw_filename:
            return None
            
        # Supprimer les timestamps et m√©tadonn√©es
        filename = raw_filename.strip()
        filename = re.sub(r'\\s+\\d{4}-\\d{2}-\\d{2}\\s+\\d{2}:\\d{2}:\\d{2}.*$', '', filename)
        filename = re.sub(r'\\s+[A-Z][a-z]{2}\\s+[A-Z][a-z]{2}\\s+\\d+.*$', '', filename)
        filename = filename.split('\\t')[0].strip()
        
        # Extraire juste le nom de fichier (pas le chemin complet)
        filename = filename.split('/')[-1] if '/' in filename else filename
        
        # Valider que c'est un nom de fichier valide
        if (filename and 
            len(filename) > 2 and 
            '.' in filename and
            not filename.startswith('.') and
            filename not in ['a', 'b', 'old', 'new', 'error']):
            return filename
        
        return None

    def _resolve_target_path(self, filename: str, patch_path: Path) -> Path:
        """NOUVEAU: R√©sout un nom de fichier vers un chemin r√©el"""
        if not filename:
            return None
        
        # Rechercher dans plusieurs r√©pertoires
        search_dirs = [
            Path.cwd(),                           # R√©pertoire courant
            patch_path.parent,                    # R√©pertoire du patch
            self.source_dir if self.source_dir.is_dir() else self.source_dir.parent,
        ]
        
        # Ajouter des sous-r√©pertoires courants si ils existent
        for base in [Path.cwd(), patch_path.parent]:
            for subdir in ['src', 'ui', 'lib', 'app', 'core']:
                subdir_path = base / subdir
                if subdir_path.exists():
                    search_dirs.append(subdir_path)
        
        # Rechercher le fichier
        for search_dir in search_dirs:
            if not search_dir.exists():
                continue
                
            # Recherche exacte
            target_path = search_dir / filename
            if target_path.exists() and target_path.is_file():
                return target_path
            
            # Recherche r√©cursive limit√©e
            for depth in range(1, 4):
                pattern = "*/" * depth + filename
                try:
                    for found_path in search_dir.glob(pattern):
                        if found_path.is_file():
                            return found_path
                except Exception:
                    continue
        
        return None
'''
    
    # Ins√©rer la nouvelle m√©thode apr√®s la d√©finition de la classe
    class_pattern = r'(class SmartPatchProcessor:.*?def __init__\(self.*?\n.*?\n)'
    if re.search(class_pattern, content, re.DOTALL):
        # Trouver o√π ins√©rer apr√®s __init__
        init_end = content.find('self.processing_stats = {')
        if init_end != -1:
            # Trouver la fin du dict
            dict_end = content.find('}', init_end) + 1
            insertion_point = content.find('\n', dict_end) + 1
            content = content[:insertion_point] + new_method + content[insertion_point:]
    
    # CORRECTION: Modifier process_single_patch pour utiliser la nouvelle d√©tection
    old_detection = '''# D√©tecter ou utiliser le fichier cible sp√©cifi√©
            if explicit_target and explicit_target.exists():
                target_file = explicit_target
                self.logger.debug(f"Utilisation du fichier cible sp√©cifi√©: {target_file}")
            elif hasattr(self, "target_file") and self.target_file and self.target_file.exists():
                target_file = self.target_file
                self.logger.debug(f"Utilisation du fichier cible de l\\'instance: {target_file}")
            else:
                target_file = self.detector.detect_target_file(patch_path, patch_content)
                if not target_file:
                    result.errors.append("Fichier cible non d√©tect√© et aucun fichier explicite fourni")
                    return result
                self.logger.debug(f"Fichier cible d√©tect√© automatiquement: {target_file}")'''
    
    new_detection = '''# CORRECTION: D√©tection am√©lior√©e des fichiers cibles
            if explicit_target and explicit_target.exists():
                target_files = [explicit_target]
                self.logger.debug(f"Utilisation du fichier cible sp√©cifi√©: {explicit_target}")
            elif hasattr(self, "target_file") and self.target_file and self.target_file.exists():
                target_files = [self.target_file]
                self.logger.debug(f"Utilisation du fichier cible de l\\'instance: {self.target_file}")
            else:
                # NOUVEAU: D√©tecter tous les fichiers cibles possibles
                target_files = self.detect_patch_targets_improved(patch_content, patch_path)
                
                if not target_files:
                    result.errors.append("Aucun fichier cible d√©tect√© - le patch ne semble pas contenir de fichiers Python valides")
                    return result
                
                self.logger.debug(f"Fichiers cibles d√©tect√©s: {[str(f) for f in target_files]}")

            # Traiter le premier fichier cible valide trouv√©
            target_file = target_files[0]'''
    
    content = content.replace(old_detection, new_detection)
    
    # Sauvegarder
    with open(processor_file, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"‚úÖ {processor_file} corrig√©")
    return True

def main():
    """Fonction principale du fix"""
    print("üîß Smart Patch Processor - Fix du probl√®me de d√©tection des fichiers cibles")
    print("=" * 70)
    
    # V√©rifier qu'on est dans le bon r√©pertoire
    if not Path("main.py").exists() or not Path("smart_patch_processor.py").exists():
        print("‚ùå Veuillez ex√©cuter ce script depuis le r√©pertoire Smart Patch Processor")
        sys.exit(1)
    
    # Cr√©er une sauvegarde
    import shutil
    from datetime import datetime
    
    backup_dir = Path(f"backup_before_fix_{datetime.now().strftime('%Y%m%d_%H%M%S')}")
    backup_dir.mkdir(exist_ok=True)
    
    files_to_backup = ["target_file_detector.py", "smart_patch_processor.py"]
    for file in files_to_backup:
        if Path(file).exists():
            shutil.copy2(file, backup_dir)
    
    print(f"üíæ Sauvegarde cr√©√©e dans: {backup_dir}")
    
    # Appliquer les corrections
    success = True
    
    if not fix_target_file_detector():
        success = False
    
    if not fix_smart_patch_processor():
        success = False
    
    # R√©sum√©
    print("\n" + "=" * 70)
    if success:
        print("‚úÖ CORRECTIONS APPLIQU√âES AVEC SUCC√àS !")
        print("\nCorrections effectu√©es:")
        print("‚Ä¢ Am√©lioration des patterns de d√©tection des fichiers")
        print("‚Ä¢ Filtrage des noms de fichiers invalides ('error', 'a', 'b', etc.)")
        print("‚Ä¢ Nettoyage des timestamps et m√©tadonn√©es dans les noms de fichiers")
        print("‚Ä¢ D√©tection am√©lior√©e pour patches multi-fichiers")
        print("‚Ä¢ Recherche √©tendue dans multiple r√©pertoires")
        
        print(f"\nüß™ TESTEZ MAINTENANT:")
        print("smart-patch --guided error.patch ./ --verbose")
        
    else:
        print("‚ùå CERTAINES CORRECTIONS ONT √âCHOU√â")
        print(f"üíæ Vous pouvez restaurer depuis: {backup_dir}")
    
    print(f"\nüíæ Sauvegarde conserv√©e dans: {backup_dir}")

if __name__ == "__main__":
    main()
