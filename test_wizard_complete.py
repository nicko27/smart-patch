#!/usr/bin/env python3
"""
Test complet des corrections du wizard
Valide que toutes les corrections fonctionnent
"""
from pathlib import Path


def test_all_wizard_fixes():
    """Teste toutes les corrections du wizard"""
    print("üß™ Test complet des corrections wizard")
    print("=" * 50)

    errors = []

    # Test 1: Import du wizard
    try:
        from wizard_mode import WizardMode
        print("‚úÖ Test 1: Import wizard_mode OK")
    except Exception as e:
        errors.append(f"Import wizard_mode: {e}")
        print(f"‚ùå Test 1: {e}")

    # Test 2: Cr√©ation d'instance
    try:
        from patch_processor_config import PatchProcessorConfig
        config = PatchProcessorConfig()
        wizard = WizardMode(None, config)
        print("‚úÖ Test 2: Cr√©ation instance wizard OK")
    except Exception as e:
        errors.append(f"Cr√©ation instance: {e}")
        print(f"‚ùå Test 2: {e}")
        return False

    # Test 3: M√©thodes s√©curis√©es pr√©sentes
    try:
        required_methods = ['_show_detailed_results', '_diagnose_processor_state']
        for method in required_methods:
            if not hasattr(wizard, method):
                errors.append(f"M√©thode manquante: {method}")
            else:
                print(f"‚úÖ Test 3: M√©thode {method} pr√©sente")
    except Exception as e:
        errors.append(f"V√©rification m√©thodes: {e}")
        print(f"‚ùå Test 3: {e}")

    # Test 4: Gestion des r√©sultats vides
    try:
        wizard._show_detailed_results({})
        print("‚úÖ Test 4: _show_detailed_results g√®re les dicts vides")
    except Exception as e:
        errors.append(f"_show_detailed_results dict vide: {e}")
        print(f"‚ùå Test 4: {e}")

    # Test 5: Gestion des r√©sultats avec format inattendu
    try:
        wizard._show_detailed_results({"unexpected": "format"})
        print("‚úÖ Test 5: _show_detailed_results g√®re les formats inattendus")
    except Exception as e:
        errors.append(f"_show_detailed_results format inattendu: {e}")
        print(f"‚ùå Test 5: {e}")

    # Test 6: Diagnostic du processeur
    try:
        wizard._diagnose_processor_state()
        print("‚úÖ Test 6: Diagnostic processeur fonctionne")
    except Exception as e:
        errors.append(f"Diagnostic processeur: {e}")
        print(f"‚ùå Test 6: {e}")

    # Test 7: V√©rification du code source pour get_processor()
    try:
        import inspect
        source = inspect.getsource(wizard._step_7_execution_and_guidance)
        if "get_processor()" in source:
            errors.append("get_processor() encore pr√©sent dans le code")
            print("‚ùå Test 7: get_processor() encore dans le code")
        else:
            print("‚úÖ Test 7: get_processor() supprim√© du code")
    except Exception as e:
        errors.append(f"V√©rification code source: {e}")
        print(f"‚ùå Test 7: {e}")

    # R√©sum√©
    print("\n" + "=" * 50)
    if errors:
        print("‚ùå √âCHECS D√âTECT√âS:")
        for error in errors:
            print(f"   ‚Ä¢ {error}")
        print("\nüí° Relancez la correction ou v√©rifiez manuellement")
        return False
    else:
        print("üéâ TOUS LES TESTS PASS√âS !")
        print("‚úÖ Le wizard est maintenant compl√®tement corrig√©")
        return True

def test_wizard_execution_simulation():
    """Simule une ex√©cution du wizard pour tester la robustesse"""
    print("\nüéÆ Simulation d'ex√©cution wizard...")

    try:
        from wizard_mode import WizardMode
        from patch_processor_config import PatchProcessorConfig

        # Cr√©er un mock processor
        class MockProcessor:
            def __init__(self):
                self.source_dir = "."
                self.output_dir = "."
                self.verbose = False
                self.git_integration = MockGitIntegration()
                self.interactive_cli = MockInteractiveCLI()
                self.config = PatchProcessorConfig()

            def process_all_patches(self):
                # Retourner diff√©rents formats pour tester la robustesse
                import random
                formats = [
                    {'success': 1, 'failed': 0, 'total': 1},
                    {'successful_patches': 1, 'failed_patches': 0, 'total_patches': 1},
                    {'results': [MockResult(True)]},
                    None,
                    "unexpected_string",
                    42
                ]
                return random.choice(formats)

        class MockGitIntegration:
            def __init__(self):
                self.is_git_available = False

        class MockInteractiveCLI:
            def is_enabled(self):
                return False

        class MockResult:
            def __init__(self, success):
                self.success = success
                self.patch_file = "test.patch"
                self.target_file = "test.py"
                self.output_file = "test_output.py"
                self.issues = []
                self.errors = []

        # Cr√©er le wizard avec mock
        config = PatchProcessorConfig()
        processor = MockProcessor()
        wizard = WizardMode(processor, config)

        # Simuler des choix utilisateur
        wizard.session['user_choices'] = {
            'selected_patches': [Path("test.patch")],
            'safety_config': {'rollback_enabled': True},
            'advanced_config': {'ast_enabled': True}
        }

        # Tester _apply_wizard_configuration
        wizard._apply_wizard_configuration()
        print("‚úÖ Configuration wizard appliqu√©e sans erreur")

        # Tester les m√©thodes avec diff√©rents formats
        for i in range(3):
            try:
                summary = processor.process_all_patches()
                wizard._show_detailed_results(summary if isinstance(summary, dict) else {})
                print(f"‚úÖ Test format {i+1}: Gestion robuste OK")
            except Exception as e:
                print(f"‚ùå Test format {i+1}: {e}")
                return False

        print("üéâ Simulation d'ex√©cution r√©ussie !")
        return True

    except Exception as e:
        print(f"‚ùå Erreur simulation: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üî¨ TESTS COMPLETS DU WIZARD CORRIG√â")
    print("=" * 60)

    success1 = test_all_wizard_fixes()
    success2 = test_wizard_execution_simulation()

    print("\n" + "=" * 60)
    if success1 and success2:
        print("üéâ TOUTES LES CORRECTIONS VALID√âES !")
        print("‚úÖ Le wizard est pr√™t √† l'utilisation")
        print("\nüí° Testez maintenant avec: python3 main.py --wizard")
    else:
        print("‚ùå Certains tests ont √©chou√©")
        print("üí° V√©rifiez les erreurs ci-dessus")

    exit(0 if (success1 and success2) else 1)
