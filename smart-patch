#!/usr/bin/env python3
"""Smart Patch Processor v2.0 - Script Ex√©cutable"""

import sys
import os
from pathlib import Path

def main():
    # Chemins possibles pour les modules
    possible_paths = [
        # 1. Installation locale (d√©veloppement)
        Path(__file__).parent.absolute(),
        # 2. Installation globale syst√®me
        Path("/usr/local/lib/smart-patch-processor"),
        # 3. Installation pip utilisateur
        Path.home() / ".local/lib/python3.*/site-packages/smart-patch-processor",
        # 4. Installation pip syst√®me
        Path("/usr/local/lib/python3.*/site-packages/smart-patch-processor"),
    ]
    
    # Rechercher le r√©pertoire contenant main.py
    script_dir = None
    for path in possible_paths:
        # G√©rer les wildcards pour les versions Python
        if "*" in str(path):
            import glob
            for expanded_path in glob.glob(str(path)):
                expanded_path = Path(expanded_path)
                if (expanded_path / "main.py").exists():
                    script_dir = expanded_path
                    break
        else:
            if (path / "main.py").exists():
                script_dir = path
                break
        
        if script_dir:
            break
    
    if not script_dir:
        print("‚ùå Erreur: Impossible de localiser les modules Smart Patch Processor")
        print("Chemins v√©rifi√©s:")
        for path in possible_paths:
            print(f"  - {path}")
        print("\nüí° Solutions possibles:")
        print("  1. R√©installer avec: ./install_script.sh")
        print("  2. Installer via pip: pip3 install ./")
        print("  3. Ex√©cuter depuis le r√©pertoire source: python3 main.py")
        sys.exit(1)
    
    # Ajouter au Python path
    if str(script_dir) not in sys.path:
        sys.path.insert(0, str(script_dir))
    
    try:
        from main import main as smart_patch_main
        smart_patch_main()
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        print(f"R√©pertoire utilis√©: {script_dir}")
        print("Fichiers disponibles:")
        for file in script_dir.glob("*.py"):
            print(f"  - {file.name}")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Erreur d'ex√©cution: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
