#!/usr/bin/env python3
"""
Smart Patch Processor v2.0 - Syst√®me d'aide d√©taill√© et color√©
Module help_system.py
"""

import sys
import os
from pathlib import Path
from typing import Dict, List, Optional

# Import du syst√®me de couleurs
try:
    from colors import Colors
except ImportError:
    class Colors:
        BOLD = '\033[1m'
        RED = '\033[31m'
        GREEN = '\033[32m'
        YELLOW = '\033[33m'
        BLUE = '\033[34m'
        PURPLE = '\033[35m'
        CYAN = '\033[36m'
        END = '\033[0m'

class SmartPatchHelp:
    """Syst√®me d'aide avanc√© pour Smart Patch Processor"""

    def __init__(self, version="2.0"):
        self.version = version
        self.examples_dir = Path.cwd() / "examples"

    def show_main_help(self):
        """Affiche l'aide principale compl√®te"""
        self._print_header()
        self._print_synopsis()
        self._print_modes()
        self._print_common_options()
        self._print_examples()
        self._print_troubleshooting()
        self._print_footer()

    def show_guided_help(self):
        """Aide sp√©cifique au mode guid√©"""
        self._print_section_header("üéØ MODE GUID√â - AIDE D√âTAILL√âE")

        print(f"{Colors.BLUE}üìö Le mode guid√© est recommand√© pour tous les utilisateurs.{Colors.END}")
        print("Il vous accompagne √©tape par √©tape avec des v√©rifications de s√©curit√©.")
        print()

        print(f"{Colors.CYAN}{Colors.BOLD}USAGE DU MODE GUID√â:{Colors.END}")
        print(f"   {Colors.GREEN}smart-patch --guided [OPTIONS] SOURCE DESTINATION{Colors.END}")
        print()

        print(f"{Colors.YELLOW}OPTIONS SP√âCIFIQUES AU MODE GUID√â:{Colors.END}")
        options = [
            ("--backup-dir DIR", "R√©pertoire personnalis√© pour les sauvegardes", "~/backups"),
            ("--modify-original", "Modifier directement les fichiers originaux", "Attention !"),
            ("--preview-only", "Aper√ßu uniquement, sans application", "S√©curis√©"),
            ("--interactive", "Mode interactif avec confirmations", "Recommand√©"),
            ("--batch-mode", "Traitement par lots sans interruption", "Avanc√©"),
        ]

        for option, desc, note in options:
            print(f"   {Colors.CYAN}{option:20}{Colors.END} {desc}")
            print(f"      {Colors.PURPLE}üí° {note}{Colors.END}")

        print(f"\n{Colors.BOLD}üîÑ PROCESSUS √âTAPE PAR √âTAPE:{Colors.END}")
        steps = [
            "üîç Analyse et d√©tection des patches",
            "üéØ Identification des fichiers cibles",
            "üõ°Ô∏è V√©rifications de s√©curit√©",
            "üëÅÔ∏è Aper√ßu des modifications (optionnel)",
            "üíæ Cr√©ation des sauvegardes",
            "‚ö° Application des patches",
            "üìä Rapport de r√©sultats"
        ]

        for i, step in enumerate(steps, 1):
            print(f"   {i}. {step}")

        print(f"\n{Colors.GREEN}‚ú® EXEMPLES PRATIQUES:{Colors.END}")
        examples = [
            ("D√©butant complet", "smart-patch --guided patches/ output/", "Traitement s√©curis√© de base"),
            ("Avec backup personnalis√©", "smart-patch --guided --backup-dir ~/mes_sauvegardes patches/ output/", "Sauvegardes dans un dossier sp√©cifique"),
            ("Preview seulement", "smart-patch --guided --preview-only patches/ /tmp/", "Voir sans appliquer"),
            ("Modification directe", "smart-patch --guided --modify-original patches/ ./", "Modifie les originaux")
        ]

        for title, cmd, desc in examples:
            print(f"\n   {Colors.BOLD}{title}:{Colors.END}")
            print(f"   {Colors.GREEN}$ {cmd}{Colors.END}")
            print(f"   üí° {desc}")

    def show_wizard_help(self):
        """Aide pour le mode assistant"""
        self._print_section_header("üßô‚Äç‚ôÇÔ∏è MODE ASSISTANT - AIDE D√âTAILL√âE")

        print(f"{Colors.BLUE}üìö L'assistant vous guide pas-√†-pas si vous d√©butez avec les patches.{Colors.END}")
        print("Il analyse votre situation et recommande la meilleure configuration.")
        print()

        print(f"{Colors.CYAN}{Colors.BOLD}LANCEMENT DE L'ASSISTANT:{Colors.END}")
        print(f"   {Colors.GREEN}smart-patch --wizard{Colors.END}")
        print()

        print(f"{Colors.YELLOW}üéØ QUE FAIT L'ASSISTANT ?{Colors.END}")
        features = [
            "üîç D√©tecte automatiquement vos patches",
            "‚ùì Analyse votre niveau d'exp√©rience",
            "üéØ Identifie le type de votre projet",
            "üõ°Ô∏è Configure la s√©curit√© adapt√©e",
            "‚öôÔ∏è Propose des fonctionnalit√©s avanc√©es",
            "üìã G√©n√®re un plan d'ex√©cution d√©taill√©",
            "‚úÖ Lance le traitement avec votre validation"
        ]

        for feature in features:
            print(f"   {feature}")

        print(f"\n{Colors.BOLD}üìä PROFILS UTILISATEUR SUPPORT√âS:{Colors.END}")
        profiles = [
            ("üë∂ D√©butant complet", "Jamais utilis√© de patches", "S√©curit√© maximum + explications"),
            ("üå± D√©butant", "Quelques exp√©riences", "Mode guid√© + v√©rifications"),
            ("üöÄ Interm√©diaire", "√Ä l'aise avec les concepts", "Fonctionnalit√©s avanc√©es"),
            ("üéØ Expert", "Juste besoin d'un outil efficace", "Personnalisation compl√®te")
        ]

        for level, exp, config in profiles:
            print(f"\n   {Colors.CYAN}{level}{Colors.END}")
            print(f"      Exp√©rience: {exp}")
            print(f"      Configuration: {config}")

    def show_examples_help(self):
        """Exemples d√©taill√©s d'utilisation"""
        self._print_section_header("üìö EXEMPLES D√âTAILL√âS D'UTILISATION")

        print(f"{Colors.BLUE}Voici des exemples concrets pour diff√©rentes situations.{Colors.END}")
        print()

        scenarios = [
            {
                "title": "üî∞ D√âBUTANT - Premier patch",
                "situation": "Vous avez t√©l√©charg√© un patch depuis GitHub et ne savez pas comment l'appliquer",
                "commands": [
                    ("smart-patch --wizard", "Lance l'assistant pour vous guider"),
                    ("smart-patch --guided fix.patch output/", "Mode guid√© s√©curis√©")
                ],
                "tips": ["Gardez une sauvegarde de vos fichiers", "Utilisez toujours --guided au d√©but"]
            },
            {
                "title": "üë®‚Äçüíª D√âVELOPPEUR - Patch d'√©quipe",
                "situation": "Un coll√®gue vous a envoy√© un patch pour corriger un bug",
                "commands": [
                    ("smart-patch --guided --backup-dir ~/backups colleague.patch src/", "Avec backup personnalis√©"),
                    ("smart-patch --guided --interactive colleague.patch src/", "Avec confirmations")
                ],
                "tips": ["V√©rifiez le patch avant application", "Testez apr√®s application"]
            },
            {
                "title": "üè≠ PRODUCTION - Mise √† jour critique",
                "situation": "Application d'un patch de s√©curit√© en production",
                "commands": [
                    ("smart-patch --guided --preview-only security.patch /tmp/", "Preview d'abord"),
                    ("smart-patch --config production.json security.patch prod/", "Avec config production"),
                    ("smart-patch --guided --modify-original security.patch ./", "Application finale")
                ],
                "tips": ["Toujours preview en premier", "Utilisez une config adapt√©e", "Testez imm√©diatement"]
            },
            {
                "title": "üîß MAINTENANCE - Lot de patches",
                "situation": "Vous devez appliquer plusieurs patches d'un dossier",
                "commands": [
                    ("smart-patch --guided patches/ output/", "Traitement automatique du dossier"),
                    ("smart-patch --guided --batch-mode patches/ output/", "Mode lot sans interruption"),
                    ("smart-patch --config custom.json patches/ output/ --report", "Avec rapport d√©taill√©")
                ],
                "tips": ["Groupement automatique par fichier cible", "Un seul backup par fichier"]
            },
            {
                "title": "üéØ EXPERT - Cas sp√©cifique",
                "situation": "Patch sp√©cifique sur un fichier avec contr√¥le total",
                "commands": [
                    ("smart-patch fix.patch output/ --target myfile.py", "Cible explicite"),
                    ("smart-patch --config expert.json --no-backup fix.patch ./", "Sans backup"),
                    ("python3 main.py fix.patch myfile.py --verbose", "Appel direct Python")
                ],
                "tips": ["Mode expert pour contr√¥le maximum", "V√©rification manuelle recommand√©e"]
            }
        ]

        for scenario in scenarios:
            print(f"{Colors.BOLD}{scenario['title']}{Colors.END}")
            print(f"üìù Situation: {scenario['situation']}")
            print()

            print(f"{Colors.GREEN}Commandes recommand√©es:{Colors.END}")
            for cmd, desc in scenario['commands']:
                print(f"   {Colors.CYAN}$ {cmd}{Colors.END}")
                print(f"     üí° {desc}")

            print(f"\n{Colors.YELLOW}üí° Conseils:{Colors.END}")
            for tip in scenario['tips']:
                print(f"   ‚Ä¢ {tip}")
            print()

    def show_config_help(self):
        """Aide sur la configuration"""
        self._print_section_header("‚öôÔ∏è SYST√àME DE CONFIGURATION")

        print(f"{Colors.BLUE}Smart Patch Processor utilise un syst√®me de configuration flexible.{Colors.END}")
        print()

        print(f"{Colors.CYAN}{Colors.BOLD}CR√âATION D'UNE CONFIGURATION:{Colors.END}")
        print(f"   {Colors.GREEN}smart-patch --create-config{Colors.END}")
        print("   üí° Lance un assistant pour cr√©er une configuration personnalis√©e")
        print()

        print(f"{Colors.YELLOW}SECTIONS DE CONFIGURATION PRINCIPALES:{Colors.END}")

        sections = [
            {
                "name": "detection",
                "desc": "Configuration de la d√©tection des fichiers cibles",
                "options": [
                    ("file_extensions", "Extensions support√©es", "['.py', '.js', '.php']"),
                    ("search_radius", "Rayon de recherche", "3"),
                    ("max_search_depth", "Profondeur max", "3")
                ]
            },
            {
                "name": "security",
                "desc": "Param√®tres de s√©curit√©",
                "options": [
                    ("scan_dangerous_patterns", "Scan des patterns dangereux", "true"),
                    ("allow_system_calls", "Autoriser les appels syst√®me", "false"),
                    ("max_file_size_mb", "Taille max des fichiers", "10")
                ]
            },
            {
                "name": "guided_patching",
                "desc": "Configuration du mode guid√©",
                "options": [
                    ("enabled", "Mode guid√© activ√©", "true"),
                    ("preview_enabled", "Aper√ßus activ√©s", "true"),
                    ("auto_backup", "Backup automatique", "true")
                ]
            }
        ]

        for section in sections:
            print(f"\n{Colors.BOLD}üìÅ {section['name'].upper()}{Colors.END}")
            print(f"   {section['desc']}")
            for option, desc, default in section['options']:
                print(f"   ‚Ä¢ {Colors.CYAN}{option}{Colors.END}: {desc} (d√©faut: {Colors.YELLOW}{default}{Colors.END})")

        print(f"\n{Colors.GREEN}PROFILS PR√âD√âFINIS:{Colors.END}")
        profiles = [
            ("üî∞ D√©butant", "S√©curit√© max + mode guid√© + confirmations"),
            ("üë®‚Äçüíª D√©veloppeur", "√âquilibre performance/s√©curit√© + AST"),
            ("üè≠ Production", "Robuste + logging + rollback")
        ]

        for profile, desc in profiles:
            print(f"   {profile}: {desc}")

        print(f"\n{Colors.CYAN}UTILISATION D'UNE CONFIGURATION:{Colors.END}")
        print(f"   {Colors.GREEN}smart-patch --config ma_config.json patches/ output/{Colors.END}")

    def show_troubleshooting_help(self):
        """Guide de d√©pannage d√©taill√©"""
        self._print_section_header("üîß GUIDE DE D√âPANNAGE")

        print(f"{Colors.BLUE}Solutions aux probl√®mes les plus courants.{Colors.END}")
        print()

        problems = [
            {
                "title": "‚ùå 'Fichier cible non d√©tect√©'",
                "causes": [
                    "Le patch ne contient pas d'informations sur le fichier cible",
                    "Le nom du fichier dans le patch ne correspond pas",
                    "Le fichier cible n'existe pas dans les r√©pertoires de recherche"
                ],
                "solutions": [
                    ("Sp√©cifier explicitement", "smart-patch patch.diff output/ --target myfile.py"),
                    ("V√©rifier le contenu", "head -20 patch.diff  # Voir les headers"),
                    ("Mode wizard", "smart-patch --wizard  # Assistant de diagnostic")
                ]
            },
            {
                "title": "‚ùå 'Num√©ros de ligne incorrects'",
                "causes": [
                    "Le fichier original a √©t√© modifi√© depuis la cr√©ation du patch",
                    "Diff√©rences d'encodage ou de fins de ligne",
                    "Le patch a √©t√© cr√©√© sur une version diff√©rente"
                ],
                "solutions": [
                    ("Correction automatique", "smart-patch --guided patch.diff output/  # Active par d√©faut"),
                    ("Mode verbose", "smart-patch --verbose patch.diff output/  # D√©tails de correction"),
                    ("Preview d'abord", "smart-patch --guided --preview-only patch.diff /tmp/")
                ]
            },
            {
                "title": "‚ùå 'Permission denied'",
                "causes": [
                    "Fichiers en lecture seule",
                    "R√©pertoire de destination prot√©g√©",
                    "Permissions insuffisantes"
                ],
                "solutions": [
                    ("Backup directory", "smart-patch --guided --backup-dir ~/writable patches/ output/"),
                    ("Permissions", "chmod +w target_file.py"),
                    ("R√©pertoire alternatif", "smart-patch patches/ ~/safe_output/")
                ]
            },
            {
                "title": "‚ö†Ô∏è 'Patches partiellement appliqu√©s'",
                "causes": [
                    "Conflits entre plusieurs patches",
                    "Chunks de patch incompatibles",
                    "Modifications manuelles interf√©rentes"
                ],
                "solutions": [
                    ("Mode interactif", "smart-patch --guided --interactive patches/ output/"),
                    ("Un par un", "smart-patch --guided single.patch output/"),
                    ("Rollback", "Utiliser les backups cr√©√©s automatiquement")
                ]
            },
            {
                "title": "üêå 'Traitement trop lent'",
                "causes": [
                    "Nombreux patches volumineux",
                    "Analyse AST activ√©e sur gros fichiers",
                    "Scan de s√©curit√© approfondi"
                ],
                "solutions": [
                    ("Mode batch", "smart-patch --guided --batch-mode patches/ output/"),
                    ("Config optimis√©e", "smart-patch --config fast.json patches/ output/"),
                    ("D√©sactiver AST", "Configuration: ast_analysis_enabled: false")
                ]
            }
        ]

        for problem in problems:
            print(f"{Colors.BOLD}{problem['title']}{Colors.END}")

            print(f"\n{Colors.YELLOW}Causes possibles:{Colors.END}")
            for cause in problem['causes']:
                print(f"   ‚Ä¢ {cause}")

            print(f"\n{Colors.GREEN}Solutions:{Colors.END}")
            for solution, cmd in problem['solutions']:
                print(f"   üîß {solution}:")
                print(f"      {Colors.CYAN}{cmd}{Colors.END}")
            print()

        print(f"{Colors.PURPLE}üÜò AIDE SUPPL√âMENTAIRE:{Colors.END}")
        print("   ‚Ä¢ Tests: smart-patch --test")
        print("   ‚Ä¢ Diagnostic: smart-patch --wizard")
        print("   ‚Ä¢ Mode verbose: --verbose pour plus de d√©tails")
        print("   ‚Ä¢ Logs: Fichiers de log g√©n√©r√©s automatiquement")

    def show_advanced_help(self):
        """Aide sur les fonctionnalit√©s avanc√©es"""
        self._print_section_header("üöÄ FONCTIONNALIT√âS AVANC√âES")

        print(f"{Colors.BLUE}Fonctionnalit√©s pour utilisateurs exp√©riment√©s.{Colors.END}")
        print()

        features = [
            {
                "title": "üß† Analyse AST (Abstract Syntax Tree)",
                "desc": "Analyse syntaxique avanc√©e pour Python, JavaScript, TypeScript, PHP",
                "usage": "Activ√© par d√©faut, am√©liore la pr√©cision de d√©tection",
                "config": "correction.ast_analysis_enabled: true"
            },
            {
                "title": "üîó Int√©gration Git",
                "desc": "Cr√©ation automatique de branches et commits",
                "usage": "smart-patch --config git_enabled.json patches/ output/",
                "config": "git.enabled: true, git.create_branch: true"
            },
            {
                "title": "üîÑ Syst√®me de rollback",
                "desc": "Annulation compl√®te des modifications",
                "usage": "Automatique avec --guided, manuel via config",
                "config": "rollback.enabled: true"
            },
            {
                "title": "üìä Rapports d√©taill√©s",
                "desc": "G√©n√©ration de rapports HTML et JSON",
                "usage": "smart-patch --report patches/ output/",
                "config": "output.report_format: 'html'"
            },
            {
                "title": "üöÄ Streaming de gros fichiers",
                "desc": "Traitement efficace de fichiers volumineux",
                "usage": "Automatique pour fichiers > 50MB",
                "config": "streaming.large_file_threshold_mb: 50"
            },
            {
                "title": "üéØ Mode batch optimis√©",
                "desc": "Traitement par lots de nombreux patches",
                "usage": "smart-patch --guided --batch-mode patches/ output/",
                "config": "batch.max_concurrent_patches: 4"
            }
        ]

        for feature in features:
            print(f"{Colors.BOLD}{feature['title']}{Colors.END}")
            print(f"   üìù {feature['desc']}")
            print(f"   üîß Usage: {Colors.CYAN}{feature['usage']}{Colors.END}")
            print(f"   ‚öôÔ∏è Config: {Colors.YELLOW}{feature['config']}{Colors.END}")
            print()

        print(f"{Colors.PURPLE}üí° CONSEILS D'EXPERT:{Colors.END}")
        tips = [
            "Utilisez --verbose pour comprendre le traitement interne",
            "Cr√©ez des configs sp√©cialis√©es par projet",
            "Combinez --preview-only avec --verbose pour d√©bugger",
            "Utilisez le mode interactif pour les cas complexes",
            "Activez le rollback pour exp√©rimenter en s√©curit√©"
        ]

        for tip in tips:
            print(f"   üí° {tip}")

    def show_quick_reference(self):
        """R√©f√©rence rapide"""
        self._print_section_header("‚ö° R√âF√âRENCE RAPIDE")

        print(f"{Colors.CYAN}COMMANDES ESSENTIELLES:{Colors.END}")

        quick_commands = [
            ("smart-patch --wizard", "üßô‚Äç‚ôÇÔ∏è Assistant d√©butant"),
            ("smart-patch --guided patches/ output/", "üéØ Mode guid√© standard"),
            ("smart-patch --guided --preview-only patches/ /tmp/", "üëÅÔ∏è Aper√ßu seulement"),
            ("smart-patch --create-config", "‚öôÔ∏è Cr√©er configuration"),
            ("smart-patch --help", "‚ùì Cette aide"),
            ("smart-patch --test", "üß™ Tests syst√®me"),
            ("smart-patch --version", "‚ÑπÔ∏è Version du logiciel")
        ]

        for cmd, desc in quick_commands:
            print(f"   {Colors.GREEN}{cmd:50}{Colors.END} {desc}")

        print(f"\n{Colors.YELLOW}OPTIONS IMPORTANTES:{Colors.END}")

        important_options = [
            ("--guided", "Mode guid√© recommand√©"),
            ("--wizard", "Assistant pas-√†-pas"),
            ("--interactive", "Confirmations manuelles"),
            ("--verbose", "Affichage d√©taill√©"),
            ("--config FILE", "Fichier de configuration"),
            ("--backup-dir DIR", "R√©pertoire de sauvegarde"),
            ("--target FILE", "Fichier cible explicite"),
            ("--preview-only", "Aper√ßu sans application"),
            ("--modify-original", "Modifier fichiers originaux")
        ]

        for option, desc in important_options:
            print(f"   {Colors.CYAN}{option:20}{Colors.END} {desc}")

        print(f"\n{Colors.BLUE}WORKFLOW RECOMMAND√â:{Colors.END}")
        workflow = [
            "1. üßô‚Äç‚ôÇÔ∏è smart-patch --wizard (premi√®re fois)",
            "2. ‚öôÔ∏è smart-patch --create-config (configuration)",
            "3. üëÅÔ∏è smart-patch --guided --preview-only (v√©rification)",
            "4. üéØ smart-patch --guided patches/ output/ (application)",
            "5. üß™ smart-patch --test (validation)"
        ]

        for step in workflow:
            print(f"   {step}")

    def _print_header(self):
        """En-t√™te principal"""
        print(f"{Colors.CYAN}{Colors.BOLD}")
        print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
        print("‚ïë                    üöÄ SMART PATCH PROCESSOR v2.0                            ‚ïë")
        print("‚ïë                  Processeur Intelligent de Patches                          ‚ïë")
        print("‚ïë                          üìö AIDE D√âTAILL√âE                                  ‚ïë")
        print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
        print(f"{Colors.END}")

    def _print_section_header(self, title: str):
        """En-t√™te de section"""
        print(f"\n{Colors.CYAN}{Colors.BOLD}")
        print(f"‚ïî‚ïê‚ïê‚ïê {title} ‚ïê‚ïê‚ïê‚ïó".ljust(80, "‚ïê"))
        print(f"‚ïö{'‚ïê' * (len(title) + 8)}‚ïù")
        print(f"{Colors.END}")

    def _print_synopsis(self):
        """Synopsis d'utilisation"""
        print(f"{Colors.BOLD}üìã SYNOPSIS:{Colors.END}")
        print(f"   {Colors.GREEN}smart-patch [OPTIONS] SOURCE DESTINATION{Colors.END}")
        print(f"   {Colors.GREEN}smart-patch --guided [OPTIONS] SOURCE DESTINATION{Colors.END}")
        print(f"   {Colors.GREEN}smart-patch --wizard{Colors.END}")
        print(f"   {Colors.GREEN}smart-patch PATCH_FILE DESTINATION --target TARGET_FILE{Colors.END}")
        print()

        print(f"{Colors.BLUE}üìù DESCRIPTION:{Colors.END}")
        print("Smart Patch Processor applique intelligemment des patches avec d√©tection")
        print("automatique des fichiers cibles, correction des num√©ros de ligne, et")
        print("fonctionnalit√©s avanc√©es de s√©curit√© et rollback.")
        print()

    def _print_modes(self):
        """Modes d'utilisation"""
        print(f"{Colors.BOLD}üéØ MODES D'UTILISATION:{Colors.END}")

        modes = [
            ("üéØ Mode Guid√©", "--guided", "Recommand√© pour tous - Interface s√©curis√©e pas-√†-pas"),
            ("üßô‚Äç‚ôÇÔ∏è Mode Assistant", "--wizard", "Parfait pour d√©buter - Guide interactif complet"),
            ("‚ö° Mode Standard", "(d√©faut)", "Traitement direct - Pour utilisateurs exp√©riment√©s"),
            ("üîß Mode Expert", "--config", "Contr√¥le total - Configuration personnalis√©e"),
        ]

        for mode, flag, desc in modes:
            print(f"\n   {Colors.CYAN}{mode}{Colors.END}")
            print(f"      Flag: {Colors.YELLOW}{flag}{Colors.END}")
            print(f"      üìù {desc}")

        print(f"\n   {Colors.PURPLE}üí° Conseil: Commencez toujours par --wizard si vous d√©butez !{Colors.END}")
        print()

    def _print_common_options(self):
        """Options communes"""
        print(f"{Colors.BOLD}‚öôÔ∏è OPTIONS PRINCIPALES:{Colors.END}")
        print()

        option_groups = [
            {
                "title": "üéØ Options de Mode",
                "options": [
                    ("--guided", "Active le mode guid√© avec interface s√©curis√©e"),
                    ("--wizard", "Lance l'assistant interactif pour d√©butants"),
                    ("--interactive", "Mode interactif avec confirmations manuelles"),
                    ("--batch-mode", "Traitement par lots sans interruption")
                ]
            },
            {
                "title": "üìÅ Options de Fichiers",
                "options": [
                    ("--target FILE", "Sp√©cifie explicitement le fichier cible"),
                    ("--config FILE", "Utilise un fichier de configuration personnalis√©"),
                    ("--backup-dir DIR", "R√©pertoire personnalis√© pour les sauvegardes"),
                    ("--output-format FMT", "Format de sortie (json, yaml, html)")
                ]
            },
            {
                "title": "üõ°Ô∏è Options de S√©curit√©",
                "options": [
                    ("--preview-only", "Aper√ßu uniquement, sans application des patches"),
                    ("--modify-original", "Modifie directement les fichiers originaux"),
                    ("--no-backup", "D√©sactive la cr√©ation automatique de sauvegardes"),
                    ("--rollback", "Active le syst√®me de rollback avanc√©")
                ]
            },
            {
                "title": "üìä Options d'Affichage",
                "options": [
                    ("--verbose, -v", "Affichage d√©taill√© du traitement"),
                    ("--quiet, -q", "Mode silencieux, erreurs uniquement"),
                    ("--report", "G√©n√®re un rapport d√©taill√© des op√©rations"),
                    ("--no-color", "D√©sactive les couleurs dans l'affichage")
                ]
            },
            {
                "title": "üîß Options Syst√®me",
                "options": [
                    ("--test", "Ex√©cute les tests unitaires du syst√®me"),
                    ("--create-config", "Lance l'assistant de cr√©ation de configuration"),
                    ("--version", "Affiche la version du logiciel"),
                    ("--help", "Affiche cette aide d√©taill√©e")
                ]
            }
        ]

        for group in option_groups:
            print(f"{Colors.YELLOW}{group['title']}:{Colors.END}")
            for option, desc in group['options']:
                print(f"   {Colors.CYAN}{option:20}{Colors.END} {desc}")
            print()

    def _print_examples(self):
        """Exemples d'utilisation"""
        print(f"{Colors.BOLD}üí° EXEMPLES COURANTS:{Colors.END}")
        print()

        examples = [
            {
                "title": "üî∞ Premier usage (recommand√©)",
                "cmd": "smart-patch --wizard",
                "desc": "Lance l'assistant qui vous guide √©tape par √©tape"
            },
            {
                "title": "üéØ Mode guid√© standard",
                "cmd": "smart-patch --guided patches/ output/",
                "desc": "Traite tous les patches d'un dossier de fa√ßon s√©curis√©e"
            },
            {
                "title": "üëÅÔ∏è Aper√ßu avant application",
                "cmd": "smart-patch --guided --preview-only patches/ /tmp/",
                "desc": "Voir les changements sans les appliquer"
            },
            {
                "title": "üéØ Patch unique avec cible explicite",
                "cmd": "smart-patch --guided fix.patch output/ --target myfile.py",
                "desc": "Applique un patch sp√©cifique sur un fichier donn√©"
            },
            {
                "title": "üíæ Avec backup personnalis√©",
                "cmd": "smart-patch --guided --backup-dir ~/backups patches/ output/",
                "desc": "Sauvegarde dans un r√©pertoire sp√©cifique"
            },
            {
                "title": "‚öôÔ∏è Avec configuration personnalis√©e",
                "cmd": "smart-patch --config production.json patches/ output/",
                "desc": "Utilise une configuration sp√©cialis√©e pour la production"
            },
            {
                "title": "üìä Avec rapport d√©taill√©",
                "cmd": "smart-patch --guided --report --verbose patches/ output/",
                "desc": "G√©n√®re un rapport complet avec d√©tails de traitement"
            },
            {
                "title": "üîß Mode expert direct",
                "cmd": "python3 main.py --config expert.json patches/ output/",
                "desc": "Appel direct Python avec configuration experte"
            }
        ]

        for example in examples:
            print(f"{Colors.GREEN}{example['title']}:{Colors.END}")
            print(f"   {Colors.CYAN}$ {example['cmd']}{Colors.END}")
            print(f"   üí° {example['desc']}")
            print()

    def _print_troubleshooting(self):
        """Section d√©pannage rapide"""
        print(f"{Colors.BOLD}üîß D√âPANNAGE RAPIDE:{Colors.END}")
        print()

        quick_fixes = [
            ("‚ùå 'Command not found'", "Ex√©cutez: ./install_script.sh puis rechargez votre shell"),
            ("‚ùå 'Fichier cible non d√©tect√©'", "Utilisez: --target FICHIER ou --wizard pour diagnostic"),
            ("‚ùå 'Permission denied'", "Utilisez: --backup-dir ~/writable ou chmod +w fichier"),
            ("‚ö†Ô∏è 'Num√©ros de ligne incorrects'", "Normal ! La correction automatique est activ√©e"),
            ("üêå 'Traitement lent'", "Utilisez: --config fast.json ou --batch-mode"),
        ]

        for problem, solution in quick_fixes:
            print(f"   {Colors.RED}{problem}{Colors.END}")
            print(f"   üîß {solution}")
            print()

        print(f"{Colors.PURPLE}üÜò Pour aide d√©taill√©e: smart-patch --help troubleshooting{Colors.END}")
        print()

    def _print_footer(self):
        """Pied de page"""
        print(f"{Colors.BOLD}üìö AIDE SP√âCIALIS√âE:{Colors.END}")

        specialized_help = [
            ("smart-patch --help guided", "üéØ Aide d√©taill√©e du mode guid√©"),
            ("smart-patch --help wizard", "üßô‚Äç‚ôÇÔ∏è Aide du mode assistant"),
            ("smart-patch --help examples", "üìö Exemples d√©taill√©s par situation"),
            ("smart-patch --help config", "‚öôÔ∏è Guide de configuration avanc√©e"),
            ("smart-patch --help troubleshooting", "üîß Guide de d√©pannage complet"),
            ("smart-patch --help advanced", "üöÄ Fonctionnalit√©s avanc√©es"),
            ("smart-patch --help quick", "‚ö° R√©f√©rence rapide"),
        ]

        for cmd, desc in specialized_help:
            print(f"   {Colors.CYAN}{cmd:35}{Colors.END} {desc}")

        print()
        print(f"{Colors.YELLOW}üåü PREMI√àRE FOIS ? Commencez par:{Colors.END}")
        print(f"   {Colors.GREEN}smart-patch --wizard{Colors.END}")
        print()
        print(f"{Colors.BLUE}üìß Support: smart-patch-processor@example.com{Colors.END}")
        print(f"{Colors.BLUE}üåê Documentation: https://smart-patch-processor.readthedocs.io/{Colors.END}")
        print(f"{Colors.BLUE}üêõ Bugs: https://github.com/smart-patch-processor/issues{Colors.END}")


def show_help(help_type: str = "main"):
    """Point d'entr√©e principal pour l'aide"""
    help_system = SmartPatchHelp()

    help_types = {
        "main": help_system.show_main_help,
        "guided": help_system.show_guided_help,
        "wizard": help_system.show_wizard_help,
        "examples": help_system.show_examples_help,
        "config": help_system.show_config_help,
        "troubleshooting": help_system.show_troubleshooting_help,
        "advanced": help_system.show_advanced_help,
        "quick": help_system.show_quick_reference,
    }

    if help_type in help_types:
        help_types[help_type]()
    else:
        print(f"{Colors.RED}‚ùå Type d'aide inconnu: {help_type}{Colors.END}")
        print(f"{Colors.YELLOW}Types disponibles: {', '.join(help_types.keys())}{Colors.END}")
        help_system.show_main_help()


# Int√©gration dans main.py - Ajoutez ceci √† votre main.py existant
def enhance_argument_parser(parser):
    """Am√©liore l'argument parser avec le nouveau syst√®me d'aide"""

    # Sous-commande help sp√©cialis√©e
    help_subparser = parser.add_subparsers(dest='help_command', help='Aide sp√©cialis√©e')

    help_parser = help_subparser.add_parser('help', help="Syst√®me d'aide avanc√©")
    help_parser.add_argument('topic', nargs='?', default='main',
                           choices=['main', 'guided', 'wizard', 'examples', 'config',
                                   'troubleshooting', 'advanced', 'quick'],
                           help='Sujet d\'aide sp√©cifique')

    # Override de --help pour plus de d√©tails
    parser.add_argument('--help-topic', choices=['guided', 'wizard', 'examples', 'config',
                                                'troubleshooting', 'advanced', 'quick'],
                       help='Affiche l\'aide sur un sujet sp√©cifique')

    return parser


def handle_help_command(args):
    """G√®re les commandes d'aide"""
    if hasattr(args, 'help_command') and args.help_command == 'help':
        show_help(args.topic)
        return True
    elif hasattr(args, 'help_topic') and args.help_topic:
        show_help(args.help_topic)
        return True
    return False


# Exemple d'int√©gration dans votre main() existant
def main_with_enhanced_help():
    """Version am√©lior√©e de main() avec syst√®me d'aide avanc√©"""

    parser = argparse.ArgumentParser(
        description="Smart Patch Processor v2.0 - Traitement intelligent de patches",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        add_help=False  # On g√®re --help nous-m√™mes
    )

    # Am√©liorer le parser
    parser = enhance_argument_parser(parser)

    # Ajouter --help personnalis√©
    parser.add_argument('-h', '--help', action='store_true',
                       help='Affiche cette aide d√©taill√©e')

    # Vos arguments existants...
    parser.add_argument('source', nargs='?', help='Dossier de patches ou fichier patch unique')
    parser.add_argument('output', nargs='?', help='Dossier de destination')
    # ... autres arguments

    args = parser.parse_args()

    # G√©rer les commandes d'aide en premier
    if args.help:
        show_help('main')
        sys.exit(0)

    if handle_help_command(args):
        sys.exit(0)

    # Votre logique main() existante...
    # ... reste de votre code


if __name__ == "__main__":
    # Test du syst√®me d'aide
    import argparse

    if len(sys.argv) > 1:
        help_type = sys.argv[1]
        show_help(help_type)
    else:
        show_help('main')
