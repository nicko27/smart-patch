#!/bin/bash

# Smart Patch Processor - Installateur et V√©rificateur Complet
# Applique toutes les corrections et v√©rifie le bon fonctionnement

set -e  # Arr√™ter en cas d'erreur

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Variables
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
BACKUP_DIR="$SCRIPT_DIR/installation_backups_$(date +%Y%m%d_%H%M%S)"
LOG_FILE="$SCRIPT_DIR/installation.log"

# Fonctions utilitaires
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
    echo -e "$1"
}

success() {
    log "${GREEN}‚úÖ $1${NC}"
}

warning() {
    log "${YELLOW}‚ö†Ô∏è $1${NC}"
}

error() {
    log "${RED}‚ùå $1${NC}"
}

info() {
    log "${BLUE}‚ÑπÔ∏è $1${NC}"
}

section() {
    log "\n${CYAN}${BOLD}$1${NC}"
    log "${CYAN}$(printf '%.0s=' {1..60})${NC}"
}

# Fonction de sauvegarde
backup_files() {
    section "üìÅ CR√âATION DES SAUVEGARDES"
    
    mkdir -p "$BACKUP_DIR"
    
    # Liste des fichiers √† sauvegarder
    files_to_backup=(
        "patch_applicator.py"
        "wizard_mode.py"
        "rollback_manager.py"
        "validation.py"
        "patch_processor_config.py"
        "line_number_corrector.py"
        "core.py"
    )
    
    for file in "${files_to_backup[@]}"; do
        if [ -f "$SCRIPT_DIR/$file" ]; then
            cp "$SCRIPT_DIR/$file" "$BACKUP_DIR/"
            info "Sauvegard√©: $file"
        else
            warning "Fichier non trouv√©: $file"
        fi
    done
    
    success "Sauvegardes cr√©√©es dans: $BACKUP_DIR"
}

# Fonction d'application des corrections
apply_fixes() {
    section "üîß APPLICATION DES CORRECTIONS"
    
    if [ -f "$SCRIPT_DIR/smart_patch_fixes.py" ]; then
        info "Lancement du correcteur automatique..."
        cd "$SCRIPT_DIR"
        
        if python3 smart_patch_fixes.py; then
            success "Corrections appliqu√©es avec succ√®s"
        else
            error "√âchec lors de l'application des corrections"
            return 1
        fi
    else
        error "Fichier smart_patch_fixes.py non trouv√©"
        return 1
    fi
}

# Fonction de test des imports
test_imports() {
    section "üì¶ TEST DES IMPORTS"
    
    # Liste des modules √† tester
    modules=(
        "smart_patch_processor"
        "patch_applicator"
        "wizard_mode"
        "patch_processor_config" 
        "target_file_detector"
        "line_number_corrector"
        "validation"
        "safe_coordinator"
    )
    
    success_count=0
    total_count=${#modules[@]}
    
    for module in "${modules[@]}"; do
        if python3 -c "import $module; print('‚úÖ $module')" 2>/dev/null; then
            success "Import r√©ussi: $module"
            ((success_count++))
        else
            warning "Import √©chou√©: $module"
        fi
    done
    
    info "Imports r√©ussis: $success_count/$total_count"
    
    if [ $success_count -ge $((total_count * 70 / 100)) ]; then
        success "Taux d'import acceptable (‚â•70%)"
        return 0
    else
        warning "Taux d'import faible (<70%)"
        return 1
    fi
}

# Fonction de test de validation
run_validation_tests() {
    section "üß™ TESTS DE VALIDATION"
    
    if [ -f "$SCRIPT_DIR/validation_test_suite.py" ]; then
        info "Lancement de la suite de tests..."
        cd "$SCRIPT_DIR"
        
        if python3 validation_test_suite.py; then
            success "Tests de validation r√©ussis"
            return 0
        else
            warning "Certains tests de validation ont √©chou√©"
            return 1
        fi
    else
        warning "Suite de tests non trouv√©e (validation_test_suite.py)"
        return 1
    fi
}

# Fonction de test du wizard
test_wizard() {
    section "üßô‚Äç‚ôÇÔ∏è TEST DU WIZARD"
    
    info "Test d'import du wizard..."
    if python3 -c "
from wizard_mode import WizardMode
from patch_processor_config import PatchProcessorConfig

# Test basique
config = PatchProcessorConfig()
print('‚úÖ Configuration charg√©e')

# Test avec mock processor
class MockProcessor:
    def __init__(self):
        self.source_dir = '.'
        self.output_dir = '.'
        self.verbose = False
    
    def process_all_patches(self):
        return {'success': 1, 'failed': 0}

try:
    processor = MockProcessor()
    wizard = WizardMode(processor, config)
    print('‚úÖ Wizard cr√©√© avec succ√®s')
    
    # Test m√©thode critique
    if hasattr(wizard, '_show_detailed_results'):
        wizard._show_detailed_results({'test': 'data'})
        print('‚úÖ M√©thode _show_detailed_results fonctionne')
    
    print('‚úÖ Wizard enti√®rement fonctionnel')
except Exception as e:
    print(f'‚ùå Erreur wizard: {e}')
    exit(1)
" 2>/dev/null; then
        success "Wizard fonctionnel"
        return 0
    else
        error "Wizard non fonctionnel"
        return 1
    fi
}

# Fonction de test de s√©curit√© basique
test_security() {
    section "üîí TESTS DE S√âCURIT√â"
    
    info "Test de protection path traversal..."
    if python3 -c "
from validation import validate_file_path_secure, ValidationError

try:
    validate_file_path_secure('../../../etc/passwd', must_exist=False)
    print('‚ùå Path traversal non bloqu√©')
    exit(1)
except ValidationError:
    print('‚úÖ Path traversal bloqu√©')
except ImportError:
    print('‚ö†Ô∏è Module validation non disponible')

try:
    from patch_applicator import PatchApplicator
    from patch_processor_config import PatchProcessorConfig
    
    config = PatchProcessorConfig()
    applicator = PatchApplicator(config)
    
    # Test DoS protection
    huge_content = 'A' * (200 * 1024 * 1024)  # 200MB
    result = applicator.apply_patch(huge_content, '@@ test @@')
    print('‚úÖ Protection DoS active')
    
except Exception as e:
    print(f'‚ö†Ô∏è Test s√©curit√© partiel: {e}')
" 2>/dev/null; then
        success "Tests de s√©curit√© pass√©s"
        return 0
    else
        warning "Tests de s√©curit√© partiels"
        return 1
    fi
}

# Fonction de cr√©ation des fichiers manquants
create_missing_files() {
    section "üìù CR√âATION DES FICHIERS MANQUANTS"
    
    # Cr√©er __init__.py si manquant
    if [ ! -f "$SCRIPT_DIR/__init__.py" ]; then
        echo '"""Smart Patch Processor Package"""' > "$SCRIPT_DIR/__init__.py"
        info "Cr√©√©: __init__.py"
    fi
    
    # Cr√©er un script de lancement simplifi√©
    cat > "$SCRIPT_DIR/run_smart_patch.py" << 'EOF'
#!/usr/bin/env python3
"""
Script de lancement simplifi√© pour Smart Patch Processor
Usage: python3 run_smart_patch.py [options]
"""

import sys
import os
from pathlib import Path

# Ajouter le r√©pertoire courant au Python path
script_dir = Path(__file__).parent
if str(script_dir) not in sys.path:
    sys.path.insert(0, str(script_dir))

try:
    from main import main
    main()
except ImportError as e:
    print(f"‚ùå Erreur d'import: {e}")
    print("üí° Assurez-vous que tous les modules sont pr√©sents")
    sys.exit(1)
except Exception as e:
    print(f"‚ùå Erreur d'ex√©cution: {e}")
    sys.exit(1)
EOF
    
    chmod +x "$SCRIPT_DIR/run_smart_patch.py"
    success "Cr√©√©: run_smart_patch.py"
}

# Fonction de v√©rification finale
final_verification() {
    section "üéØ V√âRIFICATION FINALE"
    
    info "Test du syst√®me complet..."
    
    # Test 1: Imports essentiels
    info "1. Test des imports essentiels..."
    test_imports
    import_status=$?
    
    # Test 2: Wizard
    info "2. Test du wizard..."
    test_wizard
    wizard_status=$?
    
    # Test 3: S√©curit√©
    info "3. Test de s√©curit√©..."
    test_security
    security_status=$?
    
    # Test 4: Script de lancement
    info "4. Test du script de lancement..."
    if [ -f "$SCRIPT_DIR/run_smart_patch.py" ]; then
        if python3 "$SCRIPT_DIR/run_smart_patch.py" --help >/dev/null 2>&1; then
            success "Script de lancement fonctionnel"
            launch_status=0
        else
            warning "Script de lancement partiellement fonctionnel"
            launch_status=1
        fi
    else
        error "Script de lancement manquant"
        launch_status=1
    fi
    
    # Calcul du score global
    total_tests=4
    passed_tests=0
    
    [ $import_status -eq 0 ] && ((passed_tests++))
    [ $wizard_status -eq 0 ] && ((passed_tests++))
    [ $security_status -eq 0 ] && ((passed_tests++))
    [ $launch_status -eq 0 ] && ((passed_tests++))
    
    success_rate=$((passed_tests * 100 / total_tests))
    
    info "Score global: $passed_tests/$total_tests tests r√©ussis ($success_rate%)"
    
    if [ $success_rate -ge 75 ]; then
        success "‚úÖ INSTALLATION R√âUSSIE !"
        success "Le syst√®me Smart Patch Processor est op√©rationnel"
        return 0
    elif [ $success_rate -ge 50 ]; then
        warning "‚ö†Ô∏è INSTALLATION PARTIELLE"
        warning "Le syst√®me fonctionne mais avec limitations"
        return 1
    else
        error "‚ùå INSTALLATION √âCHOU√âE"
        error "Probl√®mes critiques d√©tect√©s"
        return 1
    fi
}

# Fonction d'affichage des instructions d'utilisation
show_usage_instructions() {
    section "üìñ INSTRUCTIONS D'UTILISATION"
    
    info "Commandes disponibles apr√®s installation:"
    echo ""
    echo -e "${GREEN}1. Mode d√©butant (recommand√©):${NC}"
    echo "   python3 run_smart_patch.py --wizard"
    echo "   python3 main.py --wizard"
    echo ""
    echo -e "${GREEN}2. Mode guid√©:${NC}"
    echo "   python3 run_smart_patch.py --guided patches/ output/"
    echo "   python3 main.py --guided patches/ output/"
    echo ""
    echo -e "${GREEN}3. Mode standard:${NC}"
    echo "   python3 run_smart_patch.py patches/ output/"
    echo "   python3 main.py patches/ output/"
    echo ""
    echo -e "${GREEN}4. Aide compl√®te:${NC}"
    echo "   python3 run_smart_patch.py --help"
    echo "   python3 main.py --help"
    echo ""
    echo -e "${GREEN}5. Tests:${NC}"
    echo "   python3 validation_test_suite.py"
    echo "   python3 test_architecture.py"
    echo ""
    
    info "Fichiers importants:"
    echo "   üìÅ Sauvegardes: $BACKUP_DIR"
    echo "   üìÑ Log d'installation: $LOG_FILE"
    echo "   üöÄ Script de lancement: run_smart_patch.py"
    echo ""
    
    info "En cas de probl√®me:"
    echo "   1. V√©rifiez le log: $LOG_FILE"
    echo "   2. Lancez les tests: python3 validation_test_suite.py"
    echo "   3. Restaurez depuis: $BACKUP_DIR"
    echo "   4. Relancez l'installateur: $0"
}

# Fonction de nettoyage en cas d'erreur
cleanup_on_error() {
    section "üßπ NETTOYAGE APR√àS ERREUR"
    
    if [ -d "$BACKUP_DIR" ]; then
        warning "Restauration des fichiers depuis les sauvegardes..."
        
        for backup_file in "$BACKUP_DIR"/*; do
            if [ -f "$backup_file" ]; then
                filename=$(basename "$backup_file")
                cp "$backup_file" "$SCRIPT_DIR/$filename"
                info "Restaur√©: $filename"
            fi
        done
        
        success "Fichiers restaur√©s depuis les sauvegardes"
    fi
}

# Fonction d'installation des d√©pendances Python
install_dependencies() {
    section "üì¶ V√âRIFICATION DES D√âPENDANCES"
    
    info "V√©rification de Python 3..."
    if ! command -v python3 &> /dev/null; then
        error "Python 3 non trouv√©. Veuillez installer Python 3.6+"
        exit 1
    fi
    
    python_version=$(python3 -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")
    info "Python version: $python_version"
    
    info "V√©rification des modules Python essentiels..."
    
    # Modules essentiels
    essential_modules=("pathlib" "json" "logging" "datetime" "typing")
    
    for module in "${essential_modules[@]}"; do
        if python3 -c "import $module" 2>/dev/null; then
            success "Module $module: OK"
        else
            error "Module $module: MANQUANT"
            exit 1
        fi
    done
    
    # Modules optionnels
    info "V√©rification des modules optionnels..."
    
    optional_modules=("yaml" "sqlite3")
    
    for module in "${optional_modules[@]}"; do
        if python3 -c "import $module" 2>/dev/null; then
            success "Module optionnel $module: OK"
        else
            warning "Module optionnel $module: MANQUANT (fonctionnalit√© limit√©e)"
        fi
    done
    
    success "V√©rification des d√©pendances termin√©e"
}

# Fonction principale
main() {
    # En-t√™te
    echo -e "${CYAN}${BOLD}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë        üîß INSTALLATEUR SMART PATCH PROCESSOR v2.0             ‚ïë"
    echo "‚ïë           Correcteur et V√©rificateur Complet                  ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
    
    # Initialisation du log
    echo "=== Installation Smart Patch Processor ===" > "$LOG_FILE"
    echo "Date: $(date)" >> "$LOG_FILE"
    echo "R√©pertoire: $SCRIPT_DIR" >> "$LOG_FILE"
    echo "" >> "$LOG_FILE"
    
    info "D√©but de l'installation - Log: $LOG_FILE"
    
    # V√©rification de l'environnement
    if [ ! -f "$SCRIPT_DIR/main.py" ]; then
        error "Fichier main.py non trouv√©. √ätes-vous dans le bon r√©pertoire ?"
        exit 1
    fi
    
    # Traitement des arguments
    FORCE_MODE=false
    SKIP_TESTS=false
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            --force)
                FORCE_MODE=true
                shift
                ;;
            --skip-tests)
                SKIP_TESTS=true
                shift
                ;;
            --help|-h)
                echo "Usage: $0 [--force] [--skip-tests] [--help]"
                echo ""
                echo "Options:"
                echo "  --force      Force l'installation m√™me en cas d'erreurs mineures"
                echo "  --skip-tests Ignore les tests de validation"
                echo "  --help       Affiche cette aide"
                echo ""
                echo "Ce script applique toutes les corrections identifi√©es au Smart Patch"
                echo "Processor et v√©rifie que le syst√®me fonctionne correctement."
                exit 0
                ;;
            *)
                warning "Option inconnue: $1"
                shift
                ;;
        esac
    done
    
    # √âtapes d'installation
    success_count=0
    total_steps=0
    
    # √âtape 1: V√©rification des d√©pendances
    info "√âtape 1/8: V√©rification des d√©pendances"
    ((total_steps++))
    if install_dependencies; then
        ((success_count++))
    elif [ "$FORCE_MODE" = false ]; then
        exit 1
    fi
    
    # √âtape 2: Sauvegarde
    info "√âtape 2/8: Cr√©ation des sauvegardes"
    ((total_steps++))
    if backup_files; then
        ((success_count++))
    else
        error "√âchec de la sauvegarde"
        exit 1
    fi
    
    # √âtape 3: Application des corrections
    info "√âtape 3/8: Application des corrections"
    ((total_steps++))
    if apply_fixes; then
        ((success_count++))
    else
        error "√âchec de l'application des corrections"
        if [ "$FORCE_MODE" = false ]; then
            cleanup_on_error
            exit 1
        fi
    fi
    
    # √âtape 4: Cr√©ation des fichiers manquants
    info "√âtape 4/8: Cr√©ation des fichiers manquants"
    ((total_steps++))
    if create_missing_files; then
        ((success_count++))
    fi
    
    # √âtape 5: Test des imports
    info "√âtape 5/8: Test des imports"
    ((total_steps++))
    if test_imports; then
        ((success_count++))
    elif [ "$FORCE_MODE" = false ]; then
        warning "√âchec des tests d'import - utilisez --force pour continuer"
    fi
    
    # √âtape 6: Tests de validation (optionnel)
    if [ "$SKIP_TESTS" = false ]; then
        info "√âtape 6/8: Tests de validation"
        ((total_steps++))
        if run_validation_tests; then
            ((success_count++))
        elif [ "$FORCE_MODE" = false ]; then
            warning "√âchec des tests de validation - utilisez --skip-tests pour ignorer"
        fi
    else
        info "√âtape 6/8: Tests de validation (ignor√©s)"
        ((total_steps++))
        ((success_count++))
    fi
    
    # √âtape 7: Test du wizard
    info "√âtape 7/8: Test du wizard"
    ((total_steps++))
    if test_wizard; then
        ((success_count++))
    elif [ "$FORCE_MODE" = false ]; then
        warning "√âchec du test wizard"
    fi
    
    # √âtape 8: V√©rification finale
    info "√âtape 8/8: V√©rification finale"
    ((total_steps++))
    if final_verification; then
        ((success_count++))
        final_status=0
    else
        final_status=1
    fi
    
    # R√©sum√© final
    section "üìä R√âSUM√â DE L'INSTALLATION"
    
    success_rate=$((success_count * 100 / total_steps))
    info "√âtapes r√©ussies: $success_count/$total_steps ($success_rate%)"
    
    if [ $final_status -eq 0 ]; then
        success "üéâ INSTALLATION TERMIN√âE AVEC SUCC√àS !"
        echo ""
        success "Le Smart Patch Processor v2.0 est maintenant op√©rationnel"
        success "Toutes les corrections de s√©curit√© et de robustesse ont √©t√© appliqu√©es"
        
        show_usage_instructions
        
    elif [ $success_rate -ge 75 ]; then
        warning "‚ö†Ô∏è INSTALLATION LARGEMENT R√âUSSIE"
        warning "Le syst√®me fonctionne mais quelques fonctionnalit√©s peuvent √™tre limit√©es"
        
        show_usage_instructions
        
    else
        error "‚ùå INSTALLATION √âCHOU√âE"
        error "Probl√®mes critiques emp√™chent le bon fonctionnement"
        
        info "Suggestions de d√©pannage:"
        echo "   1. Relancez avec --force: $0 --force"
        echo "   2. V√©rifiez les erreurs dans: $LOG_FILE"
        echo "   3. Restaurez les sauvegardes depuis: $BACKUP_DIR"
        echo "   4. V√©rifiez les d√©pendances Python"
        
        exit 1
    fi
}

# Gestion des signaux
trap cleanup_on_error ERR
trap 'echo -e "\n${YELLOW}Installation interrompue par l'\''utilisateur${NC}"; exit 130' INT

# V√©rification que le script est lanc√© depuis le bon r√©pertoire
if [ ! -f "$(dirname "$0")/main.py" ]; then
    error "Veuillez lancer ce script depuis le r√©pertoire Smart Patch Processor"
    exit 1
fi

# Lancement de l'installation
main "$@"